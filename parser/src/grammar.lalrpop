use super::lexer;
use super::ast;
use errors;

use super::ast::Spanned as Sp;

grammar<>;
extern {
    type Location = usize;
    type Error = errors::LexicalError;

    enum lexer::Token<> {
        "ident" => lexer::Token::Identifier(<String>),
        "string" => lexer::Token::StringLiteral(<String>),
        "int" => lexer::Token::IntLiteral(<i64>),
        "float" => lexer::Token::FloatLiteral(<f64>),
        "return" => lexer::Token::Return,
    
        "and" => lexer::Token::And,
        "or" => lexer::Token::Or,
        "if" => lexer::Token::If,
        "else" => lexer::Token::Else,
        "for" => lexer::Token::For,
        "true" => lexer::Token::True,
        "false" => lexer::Token::False,
        "let" => lexer::Token::Let,
        "gpu_fun" => lexer::Token::GpuFun,
        "pipeline" => lexer::Token::Pipeline,
        "shift" => lexer::Token::Shift,
        "scale" => lexer::Token::Scale,
        
	    "(" => lexer::Token::ParOpen,
        ")" => lexer::Token::ParClose,
        ":" => lexer::Token::Colon,
        ";" => lexer::Token::Semicolon,
        "/" => lexer::Token::Slash,
        "," => lexer::Token::Comma,
        "." => lexer::Token::Dot,
        "{" => lexer::Token::BraceOpen,
        "}" => lexer::Token::BraceClose,
        "[" => lexer::Token::BracketOpen,
        "]" => lexer::Token::BracketClose,
        "?" => lexer::Token::Question,
        "!" => lexer::Token::ExclMark,
        "*" => lexer::Token::Star,
        "+" => lexer::Token::Plus,
        "-" => lexer::Token::Minus,
        "!=" => lexer::Token::NotEqual,
        "==" => lexer::Token::VeryEqual,
        "=" => lexer::Token::Equal,        //
        ">" => lexer::Token::Greater,      //
        ">=" => lexer::Token::GreaterEqual, //
        "<" => lexer::Token::Less,         //
        "<=" => lexer::Token::LessEqual,    //
        "->" => lexer::Token::FunResultsArrow,
    }
    
}

// Comma separated 
Comma<T>: Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
};
Dot<T>: Vec<T> = {
    <v:(<T> ".")*> <e:T> => {
        let mut v = v;
        v.push(e);
        v
    }
};

AccessChain: Vec<String> = {
    <lol:Dot<"ident">> => lol,
}


pub Pipeline: ast::Pipeline = {
    "pipeline" <l:@L> <i:"ident"> <r:@R> "(" <args:Comma<Definition>> ")"
        "->" "(" <results:Comma<Type>> ")" <b: Block> =>
            ast::Pipeline{
                name: Sp::from_loc(i, l,r),
                arguments: args,
                results,
                block: b
            }
}

pub Block: ast::Block = {
    "{" <statements: (<BlockProxy>)*> "}" => ast::Block{statements: statements },
}

BlockProxy: ast::Statement = {
    <o:Op> => o,
    <s:Statement> ";" => s,
}


pub Op: ast::Statement = {
    "for" "(" <stat:Statement> ";" <e1:Expression> ";" <e2:Statement> ")"  <block:Block> => ast::Statement::For(Box::new(stat), e1, Box::new(e2), block),
    "if" "(" <e:Expression> ")" <b:Block> <el:("else" <Block>)?> => ast::Statement::IfElse(e, b, el),
}

pub Statement: ast::Statement = {
    <lr:"let"?> <l:@L> <id:"ident"> <r:@R> "=" <e:Expression> => ast::Statement::Assignment(Box::new(ast::Variable::new(Sp::from_loc(id, l, r))), e, match lr {Some(_)=> true, None =>false,}),
    <e:Expression> => ast::Statement::Expression(e),
    "return" <l:@L> <e:Expression> <r:@R> => ast::Statement::Return(e),
}

pub Expression: Box<ast::Expression> = {
    Equaled => <>,
    <a:Equaled> "and" <b:Equaled> => Box::new(ast::Expression::And(a,b)),
    <a:Equaled> "or" <b:Equaled> => Box::new(ast::Expression::Or(a,b)),
}

// no equal operator yet
Equaled: Box<ast::Expression> = {
    Related => <>,
    <a:Related> "==" <b:Related> => Box::new(ast::Expression::Equals(a, b)),
    <a:Related> "!=" <b:Related> => Box::new(ast::Expression::NotEquals(a, b)),

}

// no equal operator yet
Related: Box<ast::Expression> = {
    Added => <>,
    <a:Added> "<" <b:Added> => Box::new(ast::Expression::Less(a, b)),
    <a:Added> "<=" <b:Added> => Box::new(ast::Expression::LessEqual(a, b)),
    <a:Added> ">" <b:Added> => Box::new(ast::Expression::More(a, b)),
    <a:Added> ">=" <b:Added> => Box::new(ast::Expression::MoreEqual(a, b)),
}

Added: Box< ast::Expression> = {
    Multiplied => <>,
    <a: Added> "+" <b:Multiplied> => Box::new(ast::Expression::Add(a,b)),
    <a: Added> "-" <b:Multiplied> => Box::new(ast::Expression::Sub(a,b)),
}

Multiplied: Box<ast::Expression> = {
    Negated => <>,
    <a: Multiplied> "*" <b:Negated> => Box::new(ast::Expression::Mul(a,b)),
    <a: Multiplied> "/" <b:Negated> => Box::new(ast::Expression::Div(a,b)),
}

Negated: Box<ast::Expression> = {
    "!" <p: Primitive> => Box::new(ast::Expression::Negation(p)),
    "-" <p: Primitive> => Box::new(ast::Expression::Negation(p)),
    Primitive => <>,
}

Type: ast::Spanned<ast::Type> = {
    <l:@L> <il:"ident"> <r:@R> => Sp::from_loc(ast::Type::new(il), l, r)
}

Definition: ast::Variable = {
    <l:@L> <i1:"ident"> <r:@R> ":" <i2:"ident"> => ast::Variable::typed(Sp::from_loc(i1, l,r), ast::Type::new(i2))
}

Primitive: Box<ast::Expression> = {
    Literal => Box::new(ast::Expression::Literal(<>)),
    "shift" "(" <e1:Expression> "," <e2:Expression> ")" => Box::new(ast::Expression::Shift(e1, e2)),
    "scale" "(" <e1:Expression> "," <e2:Expression> ")" => Box::new(ast::Expression::Scale(e1, e2)),
    "(" <e:Expression> ")" => e,
    <l:@L> <i:"ident"> <r:@R>"("<args: Comma<Expression>> ")" => Box::new(ast::Expression::Invocation(Sp::from_loc(i, l, r), args)),
    <l:@L> <id:"ident"> <r:@R> => Box::new(ast::Expression::Variable(ast::Variable::new(Sp::from_loc(id, l, r)))),
    <p:Primitive> "." <l:@L> <field:"ident"> <r:@R> => Box::new(ast::Expression::Access(p, Sp::from_loc(field, l, r))),
}

Literal: ast::Literal = {
    <l:@L> <val:"int"> <r:@R>=> ast::Literal::Int(Sp::from_loc(val, l,r+1)),
    <l:@L> <val:"float"> <r:@R> => ast::Literal::Float(Sp::from_loc(val, l,r+1)),
}
