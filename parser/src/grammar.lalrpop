use std::str::FromStr;
use lexer;

grammar<'input>;
extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token<'input> {
        "ident" => lexer::Token::Identifier(<&'input str>),
        "string" => lexer::Token::StringLiteral(<String>),
        "int" => lexer::Token::IntLiteral(<i64>),
        "float" => lexer::Token::FloatLiteral(<f64>),
    
        "&&" => lexer::Token::And,
        "||" => lexer::Token::Or,
        "if" => lexer::Token::If,
        "else" => lexer::Token::Else,
        "for" => lexer::Token::For,
        
	"(" => lexer::Token::ParOpen,
        ")" => lexer::Token::ParClose,
        ":" => lexer::Token::Colon,
        ";" => lexer::Token::Semicolon,
        "," => lexer::Token::Comma,
        "." => lexer::Token::Dot,
        "{" => lexer::Token::BraceOpen,
        "}" => lexer::Token::BraceClose,
        "[" => lexer::Token::BracketOpen,
        "]" => lexer::Token::BracketClose,
        "?" => lexer::Token::Question,
    }
    
}


pub Term: i32 = {
    "(" <t:Term> ")" => t,
    ";" => 2,
};
