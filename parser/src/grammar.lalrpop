use std::str::FromStr;
use lexer;

grammar<>;
extern {
    type Location = usize;
    type Error = lexer::LexicalError;

    enum lexer::Token<> {
        "ident" => lexer::Token::Identifier(<String>),
        "string" => lexer::Token::StringLiteral(<String>),
        "int" => lexer::Token::IntLiteral(<i64>),
        "float" => lexer::Token::FloatLiteral(<f64>),
    
        "and" => lexer::Token::And,
        "or" => lexer::Token::Or,
        "if" => lexer::Token::If,
        "else" => lexer::Token::Else,
        "for" => lexer::Token::For,
        "true" => lexer::Token::True,
        "false" => lexer::Token::False,
        
	    "(" => lexer::Token::ParOpen,
        ")" => lexer::Token::ParClose,
        ":" => lexer::Token::Colon,
        ";" => lexer::Token::Semicolon,
        "," => lexer::Token::Comma,
        "." => lexer::Token::Dot,
        "{" => lexer::Token::BraceOpen,
        "}" => lexer::Token::BraceClose,
        "[" => lexer::Token::BracketOpen,
        "]" => lexer::Token::BracketClose,
        "?" => lexer::Token::Question,
        "!" => lexer::Token::ExclMark,
        "*" => lexer::Token::Star,
        "+" => lexer::Token::Plus,
        "-" => lexer::Token::Minus,
        "!=" => lexer::Token::NotEqual,
        "==" => lexer::Token::VeryEqual,
        "=" => lexer::Token::Equal,        //
        ">" => lexer::Token::Greater,      //
        ">=" => lexer::Token::GreaterEqual, //
        "<" => lexer::Token::Less,         //
        "<=" => lexer::Token::LessEqual,    //
    }
    
}


pub Term: i64 = {
    "(" <t:Term> ")" => t,
    "(" <t:Term> "*" <z:Term> ")"=> t*z,
    ";" => 2,
    "." => 13,
    "int" => <>
};
